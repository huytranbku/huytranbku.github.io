{"version":3,"sources":["screens/HomePage.js","reducers/counterReducer.js","reducers/movieReducer.js","reducers/index.js","sagas/counterSaga.js","sagas/index.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Page","state","Component","connect","dispatch","initialState","counter","counterReducer","action","type","value","loading","pops","tops","ups","gens","concat","rootReducer","combineReducers","movie","movieReducer","increaseCounterAsync","watchIncreaseCounter","decreaseCounter","watchDecreaseCounter","put","console","log","takeLatest","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","createLogger","run","App","theme","createMuiTheme","palette","primary","pink","secondary","blue","ThemeProvider","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAIMA,E,4MACJC,MAAM,G,oGAKJ,OACE,kBAAC,WAAD,wB,GAPaC,aAsBJC,eARS,SAACF,GACvB,MAAO,MAGkB,SAACG,GAC1B,MAAO,KAGMD,CAA6CH,G,8BCzBtDK,EAAe,CACnBC,QAAS,GAyBIC,EArBQ,WAAmC,IAAlCN,EAAiC,uDAAzBI,EAAcG,EAAW,uCACvD,OAAQA,EAAOC,MACb,IAAK,yBACH,OAAO,2BACFR,GADL,IAEEK,QAASL,EAAMK,QAAUE,EAAOE,QAGpC,IAAK,mBACH,OAAO,2BACFT,GADL,IAEEK,QAASL,EAAMK,QAAUE,EAAOE,QAGpC,QACE,OAAOT,ICpBPI,EAAe,CACnBM,SAAS,EACTC,KAAM,GACNC,KAAM,GACNC,IAAK,GACLC,KAAM,IA2COR,EAvCQ,WAAmC,IAAlCN,EAAiC,uDAAzBI,EAAcG,EAAW,uCACvD,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,2BACFR,GADL,IAEEW,KAAMX,EAAMW,KAAKI,OAAOR,EAAOE,SAGnC,IAAK,cACH,OAAO,2BACFT,GADL,IAEEY,KAAMZ,EAAMY,KAAKG,OAAOR,EAAOE,SAGnC,IAAK,aACH,OAAO,2BACFT,GADL,IAEEa,IAAKb,EAAMa,IAAIE,OAAOR,EAAOE,SAGjC,IAAK,cACH,OAAO,2BACFT,GADL,IAEEc,KAAMP,EAAOE,QAGjB,IAAK,iBACH,OAAO,2BACFT,GADL,IAEEU,QAASH,EAAOE,QAGpB,QACE,OAAOT,IC7BEgB,EANKC,YAAgB,CAClCZ,QAASC,EACTY,MAAOC,I,kCCDCC,G,WAkBOC,G,WASPC,G,WAiBOC,GA5CjB,SAAUH,IAAV,iEAMI,OANJ,kBAMUI,YAAI,CACRhB,KAAM,yBACNC,MAAO,IARb,sDAaIgB,QAAQC,IAAR,MAbJ,oDAkBO,SAAUL,IAAV,iEAKL,OALK,SAKCM,YAAW,mBAAoBP,GALhC,uCASP,SAAUE,IAAV,iEAMI,OANJ,kBAMUE,YAAI,CACRhB,KAAM,yBACNC,MAAO,IARb,sDAYIgB,QAAQC,IAAR,MAZJ,oDAiBO,SAAUH,IAAV,iEAKL,OALK,SAKCI,YAAW,mBAAoBL,GALhC,uC,eC9CUM,GAAV,SAAUA,IAAV,iEACL,OADK,SACCC,YAAI,CACRC,YAAKT,GACLS,YAAKP,KAHF,uCCKP,IAAMQ,EAAiBC,cAGjBC,EAAQC,YACZlB,EACAmB,YACEJ,EACAK,2BAKJL,EAAeM,IAAIT,GCOJU,MAlBf,WACE,IAAMC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,IACTC,UAAWC,IACXrC,KAAM,UAIV,OACE,kBAAC,IAAD,CAAUyB,MAAOA,GACf,kBAACa,EAAA,EAAD,CAAeP,MAAOA,GACpB,kBAACQ,EAAD,SCbYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.19dfb6f3.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\n\n// Screen: HomePage\nclass Page extends Component {\n  state={}\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <Fragment>\n        Hello world\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);\n","// Initial State\nconst initialState = {\n  counter: 0,\n};\n\n// Redux: Counter Reducer\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREASE_COUNTER_ASYNC': {\n      return {\n        ...state,\n        counter: state.counter + action.value,\n      };\n    }\n    case 'DECREASE_COUNTER': {\n      return {\n        ...state,\n        counter: state.counter - action.value,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n// Exports\nexport default counterReducer;","// Initial State\nconst initialState = {\n  loading: true,\n  pops: [],\n  tops: [],\n  ups: [],\n  gens: []\n};\n\n// Redux: Counter Reducer\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'UPDATE_POPS': {\n      return {\n        ...state,\n        pops: state.pops.concat(action.value),\n      };\n    }\n    case 'UPDATE_TOPS': {\n      return {\n        ...state,\n        tops: state.tops.concat(action.value),\n      };\n    }\n    case 'UPDATE_UPS': {\n      return {\n        ...state,\n        ups: state.ups.concat(action.value),\n      };\n    }\n    case 'UPDATE_GENS': {\n      return {\n        ...state,\n        gens: action.value,\n      };\n    }\n    case 'UPDATE_LOADING': {\n      return {\n        ...state,\n        loading: action.value,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n// Exports\nexport default counterReducer;","// Imports: Dependencies\nimport { combineReducers } from 'redux';\n\n// Imports: Reducers\nimport counterReducer from './counterReducer';\nimport movieReducer from './movieReducer';\n\n// Redux: Root Reducer\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n  movie: movieReducer,\n});\n\n// Exports\nexport default rootReducer;","// Imports: Dependencies\nimport { \n  // delay, \n  // takeEvery, \n  takeLatest, \n  put \n} from 'redux-saga/effects';\n\n// Increase Counter Async\nfunction* increaseCounterAsync() {\n  try {\n    // Delay 4 Seconds\n    // yield delay(4000);\n  \n    // Dispatch Action To Redux Store\n    yield put({ \n      type: 'INCREASE_COUNTER_ASYNC',\n      value: 1,\n    });\n  }\n  catch (error) {\n    // CHANGE LATER\n    console.log(error);\n  }\n}\n\n// Generator: Watch Increase Counter\nexport function* watchIncreaseCounter() {\n  // // Take Every Action\n  // yield takeEvery('INCREASE_COUNTER', increaseCounterAsync);\n\n  // Take Last Action\n  yield takeLatest('INCREASE_COUNTER', increaseCounterAsync);\n}\n\n// Decrease Counter Async\nfunction* decreaseCounter() {\n  try {\n    // Delay 4 Seconds\n    // yield delay(4000);\n  \n    // Dispatch Action To Redux Store\n    yield put({ \n      type: 'DECREASE_COUNTER_ASYNC',\n      value: 1,\n    });\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\n// Generator: Watch decrease Counter\nexport function* watchDecreaseCounter() {\n  // // Take Every Action\n  // yield takeEvery('DECREASE_COUNTER', decreaseCounter);\n\n  // Take Last Action\n  yield takeLatest('DECREASE_COUNTER', decreaseCounter);\n}","// Imports: Dependencies\nimport { all, fork } from 'redux-saga/effects';\n\n// Imports: Redux Sagas\nimport { watchIncreaseCounter, watchDecreaseCounter } from './counterSaga';\n\n// Redux Saga: Root Saga\nexport function* rootSaga () {\n  yield all([\n    fork(watchIncreaseCounter),\n    fork(watchDecreaseCounter),\n  ]);\n};\n","// Imports: Dependencies\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\n// Imports: Redux Root Reducer\nimport rootReducer from '../reducers/index';\n\n// Imports: Redux Root Saga\nimport { rootSaga } from '../sagas/index';\n\n// Middleware: Redux Saga\nconst sagaMiddleware = createSagaMiddleware();\n\n// Redux: Store\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(\n    sagaMiddleware,\n    createLogger(),\n  ),\n);\n\n// Middleware: Redux Saga\nsagaMiddleware.run(rootSaga);\n\n// Exports\nexport {\n  store,\n}","// Imports: Dependencies\nimport React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { pink, blue } from '@material-ui/core/colors';\nimport { Provider } from 'react-redux';\n\n// Imports: Screens\nimport HomePage from './screens/HomePage';\n\n// Imports: Redux Store\nimport { store } from './store/store';\n\n// React App\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      primary: pink,\n      secondary: blue,\n      type: 'dark',\n    },\n  });\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <HomePage />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}