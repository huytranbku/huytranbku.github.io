{"version":3,"sources":["screens/HomePage.js","reducers/counterReducer.js","reducers/movieReducer.js","reducers/index.js","sagas/counterSaga.js","sagas/index.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["getRandomInt","min","max","Math","floor","random","getRndWordInList","arr","length","Page","state","password","popupCopiedText","multiline","grams","text","getNextRndGram","name","f1","getLastTwoWordsGram","gram","slice","replace","toLowerCase","generateName","r","f","l2f","index","showPopupCopiedText","setState","setTimeout","generatePoem","start","startList","backList","nextList","results","array","Object","keys","broken","startLine6w","arrStartLine8w","startLine8w","tmp","l1","index2","element","unshift","tmp2","l2","index3","index4","push","join","this","uuidv4","modelFile","model2File","Modal","open","Button","fullWidth","variant","style","height","Grid","container","spacing","item","xs","AppBar","position","Toolbar","Typography","noWrap","Container","sm","color","onClick","TextField","value","label","startIcon","Icon","BottomNavigation","showLabels","onChange","event","newValue","window","location","href","BottomNavigationAction","icon","Component","connect","dispatch","initialState","counter","counterReducer","action","type","loading","pops","tops","ups","gens","concat","rootReducer","combineReducers","movie","movieReducer","increaseCounterAsync","watchIncreaseCounter","decreaseCounter","watchDecreaseCounter","put","console","log","takeLatest","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","createLogger","run","App","theme","createMuiTheme","palette","primary","pink","secondary","blue","ThemeProvider","HomePage","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de03c475.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Modal from '@material-ui/core/Modal';\nimport Icon from '@material-ui/core/Icon';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\n\n// import dataFile from 'assets/data.json';\nimport modelFile from 'assets/model.json';\nimport model2File from 'assets/model2.json';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction tenTimes () {\n  const results = [uuidv4(), uuidv4(), uuidv4(), uuidv4(), uuidv4(), uuidv4(), uuidv4(), uuidv4(), uuidv4(), uuidv4()]\n  return results.join('\\n');\n}\n\nconst getRndWordInList = (arr) => {\n  const max = arr.length;\n  const i = getRandomInt(0, max - 1);\n  return arr[i];\n}\n\n// Screen: HomePage\nclass Page extends Component {\n  state={\n    password: '',\n    popupCopiedText: false,\n    multiline: false,\n    grams: { '^' : [] },\n    text: ''\n  }\n\n  // loadText = async() => {\n  //   const response = await fetch('/build/data.txt');\n  //   const _data = await response.text();\n  //   const data = _data.toLowerCase();\n  //   const lines = data.split('\\n');\n\n  //   const start = {};\n  //   const backList = {};\n  //   const nextList = {};\n    \n  //   const addIntoStart = (key, value) => {\n  //     if (key === value) return;\n  //     if (start[key]) {\n  //       start[key].push(value)\n  //     } else {\n  //       start[key] = [value]\n  //     }\n  //   }\n\n  //   const addIntoBackList = (key, value) => {\n  //     if (key === value) return;\n  //     if (backList[key]) {\n  //       backList[key].push(value)\n  //     } else {\n  //       backList[key] = [value]\n  //     }\n  //   }\n\n  //   const addIntoNextList = (key, value) => {\n  //     if (key === value) return;\n  //     if (nextList[key]) {\n  //       nextList[key].push(value)\n  //     } else {\n  //       nextList[key] = [value]\n  //     }\n  //   }\n\n  //   for (let index = 0; index < lines.length; index +=2) {\n  //     const line1 = lines[index].split(' ');\n  //     const line2 = lines[index+1].split(' ');\n      \n  //     const startOf6wLine = line1[5];\n  //     const connector6wLine = line2[5];\n\n  //     addIntoStart(startOf6wLine, connector6wLine)\n  //     addIntoBackList(line1[5], line1[4])\n  //     addIntoBackList(line1[4], line1[3])\n  //     addIntoBackList(line1[3], line1[2])\n  //     addIntoBackList(line1[2], line1[1])\n  //     addIntoBackList(line1[1], line1[0])\n\n  //     addIntoBackList(line2[5], line2[4])\n  //     addIntoBackList(line2[4], line2[3])\n  //     addIntoBackList(line2[3], line2[2])\n  //     addIntoBackList(line2[2], line2[1])\n  //     addIntoBackList(line2[1], line2[0])\n\n  //     addIntoNextList(line2[5],line2[6])\n  //     addIntoNextList(line2[6],line2[7])\n  //   }\n    \n  //   console.log(start);\n  //   console.log('back', backList);\n  //   console.log('next', nextList);\n\n  //   this.setState({ password: JSON.stringify(\n  //     {\n  //       startList: start,\n  //       backList,\n  //       nextList\n  //     }\n  //   ), multiline: true })\n  // }\n\n  componentDidMount() {\n    // const lines = dataFile.lines;\n    // const grams = {};\n    // lines.forEach(_str => {\n    //   const str = _str.replace(/[^a-zA-Z\\s]/g, '');\n    //   for (let index = 0; index < str.length; index++) {\n    //     const element = str[index] || '';\n    //     const nextElement = str[index + 1] || '';\n    //     const next2Elements = str[index + 2] || '';\n        \n    //     let key1w = element;\n    //     let key2w = element + nextElement;\n    //     let key3w = element + nextElement + next2Elements;\n    //     let nextKey2w = nextElement + next2Elements;\n\n    //     key1w = '^' + key1w.replace(/[\\s]/g, '');\n    //     key2w = '^' + key2w.replace(/[\\s]/g, '');\n    //     key3w = '^' + key3w.replace(/[\\s]/g, '');\n    //     nextKey2w = '^' + nextKey2w.replace(/[\\s]/g, '');\n\n    //     if (key3w.length > 0) {\n    //       if (!grams[key1w]) {\n    //         grams[key1w] = ['^', key3w];\n    //       } else {\n    //         grams[key1w].push(key3w);\n    //       }\n    //       if (!grams[key2w]) {\n    //         grams[key2w] = ['^', key3w];\n    //       } else {\n    //         grams[key2w].push(key3w);\n    //       }\n    //     }        \n\n    //   }\n    // });\n    // this.loadText();\n    // this.setState({ password: JSON.stringify(grams), grams, multiline: true })\n    this.setState({ \n      password: uuidv4(),\n      grams: modelFile,\n      startList: model2File.startList || {},\n      backList: model2File.backList || {},\n      nextList: model2File.nextList || {},\n    })\n  }\n\n  getNextRndGram = (grams, name) => {\n    const arr = grams[name] || grams['^']\n    const max = arr.length;\n    const rnd = getRandomInt(0, max - 1);\n    const f1 = arr[rnd] || '^';\n    return f1 !== name ? f1 : '^';\n  }\n\n  getLastTwoWordsGram = (gram) => {\n    const lt = gram.slice(-3) || '';\n    return '^' + lt.replace(/[\\^]/g, '').toLowerCase();\n  }\n\n  generateName = () => {\n    let r = '';\n    let f = '';\n    let l2f = '';\n    for (let index = 0; index < 8; index++) {\n      f = this.getNextRndGram(this.state.grams, l2f);\n      l2f = this.getLastTwoWordsGram(f);\n      r += f\n    }\n    return (r).replace(/[\\^]/g, '');\n  }\n\n  showPopupCopiedText = () => {\n    this.setState({ popupCopiedText: true })\n    setTimeout(() => {\n      this.setState({ popupCopiedText: false })\n    }, 1000);\n  }\n\n  generatePoem = () => {\n    const start = this.state.startList;\n    const { backList, nextList } = this.state;\n    let results = '';\n    const array = Object.keys(start);\n    \n    for (let index = 0; index < 4; index++) {\n\n      let broken = false;\n\n      const startLine6w = getRndWordInList(array);\n      const arrStartLine8w = start[startLine6w]\n      const startLine8w = getRndWordInList(arrStartLine8w)\n\n      let tmp = startLine6w;\n      const l1 = [tmp];\n      for (let index2 = 0; index2 < 5; index2++) {\n        const element = getRndWordInList(backList[tmp] || []);\n        if (!element) broken = true;\n        l1.unshift(element);\n        tmp = element;\n      }\n\n      let tmp2 = startLine8w;\n      const l2 = [tmp2];\n      for (let index3 = 0; index3 < 5; index3++) {\n        const element = getRndWordInList(backList[tmp2] || []);\n        if (!element) broken = true;\n        l2.unshift(element);\n        tmp2 = element;\n      }\n\n      tmp2 = startLine8w;\n      for (let index4 = 0; index4 < 2; index4++) {\n        const element = getRndWordInList(nextList[tmp2] || []);\n        if (!element) broken = true;\n        l2.push(element);\n        tmp2 = element;\n      }\n\n      if (!broken) {\n        // console.log('--------------------', startLine6w, startLine8w)\n        results += l1.join(' ') + \"\\n\" + l2.join(' ') + \"\\n\"\n      }\n      \n    }\n    return results;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Modal\n          open={this.state.popupCopiedText}\n        >\n          <Button\n            fullWidth\n            variant=\"outlined\"\n          >\n            Copied to Clipboard\n          </Button>\n        </Modal>\n        <div style={{ height: \"calc(100vh - 44px)\" }}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <AppBar position=\"static\">\n                <Toolbar>\n                  <Typography variant=\"h5\" noWrap>\n                    huytranbku - v2\n                  </Typography>\n                </Toolbar>\n              </AppBar>\n            </Grid>\n          </Grid>\n          <Container>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Typography variant=\"h6\" noWrap>\n                  Generate uuid password\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item sm={8} xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  fullWidth\n                  onClick={() => { this.setState({ password: uuidv4(), multiline: false }) }}\n                >\n                  GENERATE\n                </Button>\n              </Grid>\n              <Grid item sm={4} xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  fullWidth\n                  onClick={() => { this.setState({ password: tenTimes(), multiline: true }) }}\n                >\n                  10 TIMES\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item sm={8} xs={12}>\n                <TextField\n                  value={this.state.password}\n                  fullWidth \n                  multiline={this.state.multiline}\n                  label=\"Click 'GENERATE' to get new password\"\n                />\n              </Grid>\n              <Grid item sm={4} xs={12}>\n                <CopyToClipboard text={this.state.password}>\n                  <Button\n                    startIcon={<Icon>file_copy</Icon>}\n                    fullWidth\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={() => {\n                      this.showPopupCopiedText();\n                    }}\n                  >\n                    COPY\n                  </Button>\n                </CopyToClipboard>\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Typography variant=\"h6\" noWrap>\n                  More options\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  fullWidth\n                  onClick={() => { this.setState({ password: this.generateName(), multiline: false }) }}\n                >\n                  GENERATE RANDOM STRING\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  fullWidth\n                  onClick={() => { this.setState({ password: this.generatePoem(), multiline: true }) }}\n                >\n                  GENERATE A PAIR OF POEM\n                </Button>\n              </Grid>\n            </Grid>\n          </Container>\n        </div>\n        <BottomNavigation\n          showLabels\n          onChange={(event, newValue) => {\n            window.location.href = newValue;\n          }}\n        >\n          <BottomNavigationAction value=\"/v1\" label=\"Recents\" icon={<RestoreIcon />} />\n          <BottomNavigationAction value=\"https://github.com/huytranbku\" label=\"Favorites\" icon={<FavoriteIcon />} />\n          <BottomNavigationAction value=\"https://github.com/huytranbku/huytranbku.github.io\" label=\"Sourcecode\" icon={<LocationOnIcon />} />\n        </BottomNavigation>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);\n","// Initial State\nconst initialState = {\n  counter: 0,\n};\n\n// Redux: Counter Reducer\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREASE_COUNTER_ASYNC': {\n      return {\n        ...state,\n        counter: state.counter + action.value,\n      };\n    }\n    case 'DECREASE_COUNTER': {\n      return {\n        ...state,\n        counter: state.counter - action.value,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n// Exports\nexport default counterReducer;","// Initial State\nconst initialState = {\n  loading: true,\n  pops: [],\n  tops: [],\n  ups: [],\n  gens: []\n};\n\n// Redux: Counter Reducer\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'UPDATE_POPS': {\n      return {\n        ...state,\n        pops: state.pops.concat(action.value),\n      };\n    }\n    case 'UPDATE_TOPS': {\n      return {\n        ...state,\n        tops: state.tops.concat(action.value),\n      };\n    }\n    case 'UPDATE_UPS': {\n      return {\n        ...state,\n        ups: state.ups.concat(action.value),\n      };\n    }\n    case 'UPDATE_GENS': {\n      return {\n        ...state,\n        gens: action.value,\n      };\n    }\n    case 'UPDATE_LOADING': {\n      return {\n        ...state,\n        loading: action.value,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n// Exports\nexport default counterReducer;","// Imports: Dependencies\nimport { combineReducers } from 'redux';\n\n// Imports: Reducers\nimport counterReducer from './counterReducer';\nimport movieReducer from './movieReducer';\n\n// Redux: Root Reducer\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n  movie: movieReducer,\n});\n\n// Exports\nexport default rootReducer;","// Imports: Dependencies\nimport { \n  // delay, \n  // takeEvery, \n  takeLatest, \n  put \n} from 'redux-saga/effects';\n\n// Increase Counter Async\nfunction* increaseCounterAsync() {\n  try {\n    // Delay 4 Seconds\n    // yield delay(4000);\n  \n    // Dispatch Action To Redux Store\n    yield put({ \n      type: 'INCREASE_COUNTER_ASYNC',\n      value: 1,\n    });\n  }\n  catch (error) {\n    // CHANGE LATER\n    console.log(error);\n  }\n}\n\n// Generator: Watch Increase Counter\nexport function* watchIncreaseCounter() {\n  // // Take Every Action\n  // yield takeEvery('INCREASE_COUNTER', increaseCounterAsync);\n\n  // Take Last Action\n  yield takeLatest('INCREASE_COUNTER', increaseCounterAsync);\n}\n\n// Decrease Counter Async\nfunction* decreaseCounter() {\n  try {\n    // Delay 4 Seconds\n    // yield delay(4000);\n  \n    // Dispatch Action To Redux Store\n    yield put({ \n      type: 'DECREASE_COUNTER_ASYNC',\n      value: 1,\n    });\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\n// Generator: Watch decrease Counter\nexport function* watchDecreaseCounter() {\n  // // Take Every Action\n  // yield takeEvery('DECREASE_COUNTER', decreaseCounter);\n\n  // Take Last Action\n  yield takeLatest('DECREASE_COUNTER', decreaseCounter);\n}","// Imports: Dependencies\nimport { all, fork } from 'redux-saga/effects';\n\n// Imports: Redux Sagas\nimport { watchIncreaseCounter, watchDecreaseCounter } from './counterSaga';\n\n// Redux Saga: Root Saga\nexport function* rootSaga () {\n  yield all([\n    fork(watchIncreaseCounter),\n    fork(watchDecreaseCounter),\n  ]);\n};\n","// Imports: Dependencies\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\n// Imports: Redux Root Reducer\nimport rootReducer from '../reducers/index';\n\n// Imports: Redux Root Saga\nimport { rootSaga } from '../sagas/index';\n\n// Middleware: Redux Saga\nconst sagaMiddleware = createSagaMiddleware();\n\n// Redux: Store\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(\n    sagaMiddleware,\n    createLogger(),\n  ),\n);\n\n// Middleware: Redux Saga\nsagaMiddleware.run(rootSaga);\n\n// Exports\nexport {\n  store,\n}","// Imports: Dependencies\nimport React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { pink, blue } from '@material-ui/core/colors';\nimport { Provider } from 'react-redux';\n\n// Imports: Screens\nimport HomePage from './screens/HomePage';\n\n// Imports: Redux Store\nimport { store } from './store/store';\n\n// React App\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      primary: pink,\n      secondary: blue,\n      type: 'dark',\n    },\n  });\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <HomePage />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}